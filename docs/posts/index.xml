<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on lisolaris&#39;s blog</title>
    <link>https://blog.sorali.org/posts/</link>
    <description>Recent content in Posts on lisolaris&#39;s blog</description>
    <image>
      <url>https://s.gravatar.com/avatar/ca6b899274fa556db7e5cf9c54325448</url>
      <link>https://s.gravatar.com/avatar/ca6b899274fa556db7e5cf9c54325448</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 22 Mar 2024 16:22:45 +0800</lastBuildDate><atom:link href="https://blog.sorali.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用LockWorkStation让笔记本的可编程按键发挥作用</title>
      <link>https://blog.sorali.org/2024/03/%E4%BD%BF%E7%94%A8lockworkstation%E8%AE%A9%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%8C%89%E9%94%AE%E5%8F%91%E6%8C%A5%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Fri, 22 Mar 2024 16:22:45 +0800</pubDate>
      
      <guid>https://blog.sorali.org/2024/03/%E4%BD%BF%E7%94%A8lockworkstation%E8%AE%A9%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%9A%84%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%8C%89%E9%94%AE%E5%8F%91%E6%8C%A5%E4%BD%9C%E7%94%A8/</guid>
      <description>总感觉已经许久没有写过blog了……虽然有在给域名续费，但都做的是DDNS方面的用途（顺便推荐一下Cloudflare的DNS解析服务，虽然在国内比较慢但还算方便）。写这个文章主要是想起来之前曾就怎么利用惠普笔记本上自带的F12可编程按键（可以通过系统中的HP Progrommable Key的UWP程序来编辑功能）实现按下即锁定计算机折腾过一番，特来灌水一篇（
已经忘记git和hugo该怎么用了，还是临时去查的
准备工作 因为并不是多么复杂的程序，所以只需要如果对这部分不感兴趣可以直接拉到文章底部，下载编译好的程序并为编程键设置按下启动即可。
首先可以看看这个API在MSDN上的文档:它于Windows XP中引入，功能有且只有一个：以类似于Windows键+L的方式锁定工作站（名字都直接写出来了==）。你可以在命令行中使用rundll32直接调用到user32.dll（对应的头文件为winuser.h）中的这个API：
rundll32.exe user32.dll,LockWorkStation 当然，惠普的这个可编程键并不支持在启动程序时附加参数，也不支持调用bat或者vbs之类的脚本……想要使用可编程键直接锁定电脑只能编译一个程序间接调用这个API了。
使用 将下面的代码在Windows平台上使用gcc或msvc编译后，在HP Programmable Key中设置为按下后启动即可。
#include &amp;lt;Windows.h&amp;gt; #include &amp;lt;winuser.h&amp;gt; int main(){ return(!LockWorkStation()); } 使用gcc编译时不需要额外的静态库链接，gcc应当会自动处理与系统自带的user32.dll的动态链接：
gcc lockstation.cpp -o lockstation.exe 这个程序在我的电脑上使用TDM-GCC 10.3.0在Windows 10 专业版 22H2 19045.4170下编译通过并能够正常使用。
编译好的文件可以在这里找到：https://github.com/lisolaris/lockscreen/releases/tag/alpha
拓展 有关rundll32的使用，你可以参考MSDN或是这篇文章关于利用rundll32执行程序的分析，挺有趣的。</description>
    </item>
    
    <item>
      <title>教程：如何在Windows机器上架设Minecraft服务器</title>
      <link>https://blog.sorali.org/2023/03/%E6%95%99%E7%A8%8B%E5%A6%82%E4%BD%95%E5%9C%A8windows%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%9E%B6%E8%AE%BEminecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Tue, 14 Mar 2023 12:53:17 +0800</pubDate>
      
      <guid>https://blog.sorali.org/2023/03/%E6%95%99%E7%A8%8B%E5%A6%82%E4%BD%95%E5%9C%A8windows%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%9E%B6%E8%AE%BEminecraft%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>本篇是应群友需求，来介绍一下如何在Windows机器上启动Minecraft服务端供内网用户游玩，以使用服务端上才能运行的插件之类的。关于如何让别人远程连接到你的服务器，可以参见下一篇教程：如何在服务器上使用内网穿透 。
准备工作 首先呢我们需要准备一个服务端，这里选用PaperMC，访问官网后点进右上角Downloads按需下载版本就行了。下载后得到的一个jar文件，先放着。
PaperMC属于Bukkit系的服务端，兼容大部分Bukkit和Spigot的插件，同时应用了许多针对原版的优化，令其运行速度大大快于原版vanilla；但代价就是许多原版的bug特性在Paper端不再可用，需要在高级配置中开启或是安装额外的插件（比如用于造刷沙机的跨世界实体方块更新逻辑在Paper端就需要安装这个插件）。
需要注意的是官网首页的版本是跟进到最新稳定版的，比如目前是1.19.3，那么1.19.2等不再支持的客户端需要一直往下滑点击More才能看到。此外，更旧的不再支持的大版本服务端（如1.18.2及更早）被归在Legacy里面，点进去后会提示这些版本不再受支持，你提出的任何bug都不会修补云云。
为了让游戏运行起来，我们还需要Java运行环境。你可以下载OpenJDK或是Oracle JDK，二者的区别在开源与否。
此外，从Minecraft 1.17开始，Mojang就要求玩家使用16及更高版本的JRE，因此我推荐你下载最新的JDK。从我个人的使用体验而言，OpenJDK和Oracle JDK并没有察觉到明显的差异，下载哪个都无所谓了……不过我推荐下载zip打包的JDK，可以省去配置环境变量这一步，后续要升级也很方便。
让服务器跑起来 准备好文件 现在我们就有了一个.zip的JDK压缩包，一个.jar的Java软件包。我们找个文件夹把它们装起来，解压JDK，看起来像是这样的：
打开得到的jdk文件夹，进入bin目录内，找到java.exe，按住Shift的同时右键它，在弹出的菜单中选择『复制文件地址』：
如果想运行安装了Forge或者Fabric的Mod服务器，之后我有空会再补充的。这里先介绍原版。
启动脚本 回到刚刚的目录，新建一个文本文档，填入刚刚复制的java.exe的文件地址，在后面加入参数-Xmx&amp;lt;最大限制内存&amp;gt;M -Xms&amp;lt;最小分配内存&amp;gt;M -Dfile.encoding=utf-8 -Dnative.encoding=utf-8 -jar &amp;lt;服务端文件路径&amp;gt;，比如像这样：
chcp 65001 ipconfig /all &amp;#34;D:\MinecraftServer\jdk-19.0.2\bin\java.exe&amp;#34; -Xmx4096M -Xms768M -Dfile.encoding=utf-8 -Dnative.encoding=utf-8 -jar &amp;#34;D:\MinecraftServer\paper-1.19.3-448.jar&amp;#34; pause 解释一下：
最大限制内存：允许Java虚拟机使用的最大的内存，可以理解为服务端使用的最大内存量。应当按照你电脑拥有的实际内存来设置。一般有16G内存的电脑，和三五个好友一起玩设置为4096(4GB)已经够用了，人数更多可酌情调整，但也需要更强的CPU性能。 最小分配内存：至少给Java虚拟机分配这么多内存，合理小于最大限制就可以了。 服务端文件路径：可以用和复制java.exe的文件路径相同的方法得到，粘贴进去就可以了。注意双引号不要删掉。 -Dfile.encoding=utf-8 -Dnative.encoding=utf-8：这两个参数用于指定使用的文本编码，避免控制台日志的中文显示为乱码。 保存文件，将后缀名改为bat，双击运行一次；第一次的运行会自动下载原版的服务端并在它的基础上修改（为了规避版权问题不能直接提供修改好的服务端），需要一些时间。等它下完开始滚动日志后没一会就会报错停止，这是正常的，因为我们还没有同意最终用户许可协议（同样是版权问题）。
这时在游戏文件夹里已经生成了一堆文件和文件夹，暂时不管。我们打开eula.txt，把最后一行的false改成true，保存，再次启动服务端，正常运行。
弹出防火墙提示的话记得允许放行。
这个时候可以看到命令行窗口最后一行日志是Timings reset，并有一个&amp;gt;命令提示符等待用户输入。以后可以从这里输入Minecraft指令了。
在客户端中填入服务器地址 我们打开游戏，启动多人模式，添加一个服务器为127.0.0.1:25565看看能不能正常进去：
打开F3调试选项，左上角可以看到进入了&amp;quot;Paper&amp;quot;服务器。
配置服务端 在控制台输入stop后回车停止服务端。然后打开服务端目录下的server.properties，对服务端进行配置。这里可以参考我的：
#Minecraft server properties #Mon Jan 16 16:16:38 CST 2023 allow-flight=true allow-nether=true broadcast-console-to-ops=true broadcast-rcon-to-ops=true debug=false difficulty=normal enable-command-block=true enable-jmx-monitoring=false enable-query=false enable-rcon=false enable-status=true enforce-secure-profile=true enforce-whitelist=false entity-broadcast-range-percentage=100 force-gamemode=false function-permission-level=2 gamemode=survival generate-structures=true generator-settings={} hardcore=false hide-online-players=false initial-disabled-packs= initial-enabled-packs=vanilla level-name=world level-seed= level-type=default max-chained-neighbor-updates=1000000 max-players=20 max-tick-time=60000 max-world-size=29999984 motd= network-compression-threshold=256 online-mode=false op-permission-level=4 player-idle-timeout=0 prevent-proxy-connections=false previews-chat=false pvp=true query.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://blog.sorali.org/2023/03/hello-world/</link>
      <pubDate>Mon, 06 Mar 2023 18:00:00 +0800</pubDate>
      
      <guid>https://blog.sorali.org/2023/03/hello-world/</guid>
      <description>你好，欢迎来到我的博客!
在拖延好几个星期后，我终于完成了个人页面的搭建（通过Github Pages托管）。今后应该会不定期更新一些感想和发现……也希望你能看得开心:D
关于我 这个人很懒，什么都没有留下……
关于本站 就像前面说的，这里主要是分享我的感想和发现。对于我原创的内容，你可以随意转载、复制、修改后再发布，但请标明原作者和出处；如果我使用了你的未授权的内容，请发邮件联系我，我会尽快处理的。谢谢你！
致谢 本站使用Hugo搭建，并使用了PaperMod主题。感谢你们！
其实作为第一篇博文应该写长一些的，但我还没想到要写什么……就先这样吧:)</description>
    </item>
    
  </channel>
</rss>
